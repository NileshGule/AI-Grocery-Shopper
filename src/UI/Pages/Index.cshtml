@page
@model UI.Pages.IndexModel

<div class="d-flex align-items-center justify-content-between mb-3">
    <h1 class="h3">AI Grocery Shopper</h1>
</div>

<div class="card p-3 mb-4">
    <form method="post" id="mainForm">
        <div class="table-responsive">
            <table class="table table-borderless align-middle">
                <tbody>
                    <tr>
                        <th class="text-muted fw-bold" style="width:25%">Meal description</th>
                        <td>
                            <textarea class="form-control" asp-for="Input.Description" id="Input_Description" rows="3" placeholder="Help me prepare 3 meals over Christmas weekend for family gathering of 10 people"></textarea>
                        </td>
                    </tr>

                    <tr>
                        <th class="text-muted fw-bold">Number of meals</th>
                        <td>
                            <input class="form-control" type="number" asp-for="Input.NumberOfMeals" id="Input_NumberOfMeals" value="3" />
                        </td>
                    </tr>

                    <tr>
                        <th class="text-muted fw-bold">Dietary preferences</th>
                        <td>
                            <input class="form-control" asp-for="PreferencesRaw" id="PreferencesRaw" placeholder="e.g. vegetarian, nut-free" />
                        </td>
                    </tr>

                    <tr>
                        <th class="text-muted fw-bold">Budget</th>
                        <td>
                            <input class="form-control" type="number" step="0.01" asp-for="Input.Budget" id="Input_Budget" value="25" />
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="mt-3 d-flex justify-content-center gap-2">
            <button class="btn btn-danger mx-2" type="button" id="cancelBtn">Cancel</button>
            <button class="btn btn-success mx-2" type="submit">Generate</button>
        </div>
    </form>
</div>

@if (Model.Result != null)
{
    <div class="card p-3 result-section">
        <h2 class="h5">Steps</h2>
        <div class="step-list mb-3">
            <ul class="mb-0">
                @foreach (var s in Model.Result.Steps)
                {
                    <li>@s</li>
                }
            </ul>
        </div>

        <h2 class="h5">Meal Plan</h2>
        @if (Model.Result.MealPlanResponse != null)
        {
            <ul>
                @foreach (var m in Model.Result.MealPlanResponse.Meals)
                {
                    <li>
                        <strong>@m.Name</strong>
                        <div>Ingredients: @string.Join(", ", m.Ingredients)</div>
                        <br/>
                        <div><i>Notes</i>: @m.Notes</div>
                    </li>
                }
            </ul>
        }

        <h2 class="h5">Inventory</h2>
        @if (Model.Result.InventoryResponse != null)
        {
            <div>Available: @string.Join(", ", Model.Result.InventoryResponse.Available)</div>
            <div>Missing: @string.Join(", ", Model.Result.InventoryResponse.Missing)</div>
        }

        <h2 class="h5">Budget</h2>
        @if (Model.Result.BudgetResponse != null)
        {
            <div>Total: @Model.Result.BudgetResponse.TotalCost</div>
            <ul>
                @foreach (var item in Model.Result.BudgetResponse.Items)
                {
                    <li>@item</li>
                }
            </ul>
        }

        <h2 class="h5">Shopping</h2>
        @if (Model.Result.ShopperResponse != null)
        {
            <div>Summary: @Model.Result.ShopperResponse.Summary</div>
            @if (Model.Result.ShopperResponse.Categories != null && Model.Result.ShopperResponse.Categories.Any())
            {
                foreach (var cat in Model.Result.ShopperResponse.Categories)
                {
                    <div class="mt-3">
                        <h3>@cat.Key</h3>
                        <ul>
                            @foreach (var item in cat.Value)
                            {
                                <li>
                                    <strong>@item.Name</strong>
                                    <div class="text-muted">@item.Description</div>
                                </li>
                            }
                        </ul>
                    </div>
                }
            }
        }

        @if (Model.Result.Errors.Any())
        {
            <h3 class="error">Errors</h3>
            <ul>
                @foreach (var e in Model.Result.Errors)
                {
                    <li class="error">@e</li>
                }
            </ul>
        }
    </div>
}

@section Scripts{
    <script>
        (function(){
            var cancelBtn = document.getElementById('cancelBtn');
            if (!cancelBtn) return;
            cancelBtn.addEventListener('click', function(e){
                alert('Resetting the form');
                e.preventDefault();
                var form = document.getElementById('mainForm');
                if (!form) return;

                // Clear all inputs, textareas, selects
                var controls = form.querySelectorAll('input, textarea, select');
                controls.forEach(function(el){
                    var tag = el.tagName.toLowerCase();
                    var type = (el.type || '').toLowerCase();

                    try {
                        if (tag === 'textarea') {
                            el.value = '';
                            el.innerHTML = '';
                            el.defaultValue = '';
                            el.removeAttribute('value');
                        } else if (tag === 'select') {
                            // reset to first non-disabled option if present
                            if (el.options && el.options.length > 0) {
                                el.selectedIndex = -1;
                                for (var k = 0; k < el.options.length; k++) {
                                    el.options[k].selected = false;
                                }
                            }
                        } else if (type === 'checkbox' || type === 'radio') {
                            el.checked = false;
                            el.defaultChecked = false;
                        } else {
                            // text, number, email, hidden, etc.
                            el.value = '';
                            el.defaultValue = '';
                            el.removeAttribute('value');
                        }

                        // trigger input/change events in case any listeners rely on it
                        try { el.dispatchEvent(new Event('input', { bubbles: true })); } catch(e){}
                        try { el.dispatchEvent(new Event('change', { bubbles: true })); } catch(e){}
                    } catch (err) {
                        // ignore individual control errors
                        console.error('clear control error', err);
                    }
                });

                // As a fallback, call form.reset() to clear built-in values
                try { form.reset(); } catch (err) {}

                // Hide result section if visible
                var resultCard = document.querySelector('.result-section');
                if (resultCard) resultCard.style.display = 'none';

                // focus the first textarea or input
                var first = form.querySelector('textarea, input[type="text"], input[type="number"], input:not([type])');
                if (first) first.focus();
            });
        })();
    </script>
}
